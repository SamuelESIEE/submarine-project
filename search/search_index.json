{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>Home: index.md</li> <li>Requirements:<ul> <li>System: requirements/system.md</li> </ul> </li> <li>Documentation:<ul> <li>Block Diagrams: docs/block_diagrams.md extra:   social:</li> <li>icon: fontawesome/brands/github   link: https://github.com/SamuelESIEE/submarine-project</li> </ul> </li> </ul>"},{"location":"block_diagrams/","title":"Block Diagrams","text":""},{"location":"design/block_diagrams/","title":"Block Diagrams","text":"<p>Below is the high-level system block diagram of the Autonomous Submarine:</p> <p></p>"},{"location":"design/block_diagrams/#description","title":"Description","text":"<ul> <li>The STM32H7 MCU controls motor drivers, reads sensor data, and handles communication.</li> <li>The STM32L0 backup MCU monitors battery and pressure sensors to wake the system from sleep.</li> <li>AI module (Raspberry Pi or K210) processes vision data for obstacle avoidance.</li> <li>Wireless module manages communication with surface station.</li> </ul>"},{"location":"design/interfaces/","title":"Communication Interfaces","text":"Interface Usage Protocol Details UART Debugging and data logging 115200 baud, 8N1 SPI Pressure sensor communication Mode 0, 1 MHz I2C IMU sensor and EEPROM Standard mode 100 kHz Wireless Telemetry and remote commands 2.4 GHz proprietary protocol <p>All interfaces use level shifting to protect the MCU inputs from voltage mismatches.</p>"},{"location":"firmware/stm32h7/","title":"Firmware for STM32H7","text":""},{"location":"firmware/stm32h7/#overview","title":"Overview","text":"<p>The STM32H7 firmware is responsible for:</p> <ul> <li>Sensor data acquisition and filtering</li> <li>Motor control (PWM outputs)</li> <li>Communication with AI coprocessor and wireless module</li> <li>Data logging on microSD card</li> </ul>"},{"location":"firmware/stm32h7/#architecture","title":"Architecture","text":"<ul> <li>Main Loop: Periodically reads sensors and updates motor commands.</li> <li>Interrupts: Handle UART, SPI data reception.</li> <li>Power Management: Coordinates with STM32L0 for low-power modes.</li> </ul>"},{"location":"firmware/stm32h7/#code-snippet-reading-imu-via-i2c","title":"Code Snippet: Reading IMU via I2C","text":"<p>```c HAL_I2C_Mem_Read(&amp;hi2c1, MPU9250_ADDRESS, MPU9250_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);</p>"},{"location":"requirements/sensors/","title":"Sensors Requirements","text":"Sensor Type Model Purpose Interface IMU MPU-9250 Orientation &amp; motion I2C Pressure Sensor MS5803-14BA Depth measurement SPI Temperature DS18B20 Water temperature 1-Wire Camera Raspberry Pi Cam Vision &amp; AI input CSI (via AI module) <p>All sensors are waterproofed and calibrated for underwater use.</p>"},{"location":"requirements/system/","title":"System Requirements","text":""},{"location":"requirements/system/#power-supply","title":"Power Supply","text":"<ul> <li>Battery: Li-ion 3.7V, 2000mAh</li> <li>Voltage Regulation: LDO regulator providing a stable 3.3V supply for all MCUs and sensors.</li> </ul>"},{"location":"requirements/system/#processing-units","title":"Processing Units","text":"<ul> <li>Main MCU: STM32H7 for high-performance control and sensor processing.</li> <li>Backup MCU: STM32L0 for ultra-low power monitoring and wake-up control.</li> </ul>"},{"location":"requirements/system/#communication","title":"Communication","text":"<ul> <li>Wireless communication using 2.4 GHz transceivers.</li> <li>Wired interfaces: UART, SPI, I2C for sensors and peripherals.</li> </ul>"},{"location":"requirements/system/#environmental","title":"Environmental","text":"<ul> <li>Waterproof housing rated IP68.</li> <li>Operating depth up to 50 meters.</li> </ul>"}]}