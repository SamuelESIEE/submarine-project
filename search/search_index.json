{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autonomous Submarine Project","text":"<p>This documentation outlines the design, development, and validation of an autonomous underwater vehicle built with open hardware and software.</p>"},{"location":"design/block_diagrams/","title":"Block Diagrams","text":"<p>Below is the high-level system block diagram of the Autonomous Submarine:</p> <p>![System Block Diagram]</p>"},{"location":"design/block_diagrams/#description","title":"Description","text":"<ul> <li>The STM32H7 MCU controls motor drivers, reads sensor data, and handles communication.</li> <li>The STM32L0 backup MCU monitors battery and pressure sensors to wake the system from sleep.</li> <li>AI module (Raspberry Pi or K210) processes vision data for obstacle avoidance.</li> <li>Wireless module manages communication with surface station.</li> </ul>"},{"location":"design/interfaces/","title":"Communication Interfaces","text":"Interface Usage Protocol Details UART Debugging and data logging 115200 baud, 8N1 SPI Pressure sensor communication Mode 0, 1 MHz I2C IMU sensor and EEPROM Standard mode 100 kHz Wireless Telemetry and remote commands 2.4 GHz proprietary protocol <p>All interfaces use level shifting to protect the MCU inputs from voltage mismatches.</p>"},{"location":"firmware/stm32h7/","title":"Firmware for STM32H7","text":""},{"location":"firmware/stm32h7/#overview","title":"Overview","text":"<p>The STM32H7 firmware is responsible for:</p> <ul> <li>Sensor data acquisition and filtering</li> <li>Motor control (PWM outputs)</li> <li>Communication with AI coprocessor and wireless module</li> <li>Data logging on microSD card</li> </ul>"},{"location":"firmware/stm32h7/#architecture","title":"Architecture","text":"<ul> <li>Main Loop: Periodically reads sensors and updates motor commands.</li> <li>Interrupts: Handle UART, SPI data reception.</li> <li>Power Management: Coordinates with STM32L0 for low-power modes.</li> </ul>"},{"location":"firmware/stm32h7/#code-snippet-reading-imu-via-i2c","title":"Code Snippet: Reading IMU via I2C","text":"<p>```c HAL_I2C_Mem_Read(&amp;hi2c1, MPU9250_ADDRESS, MPU9250_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);</p>"},{"location":"overview/architecture/","title":"System Architecture Overview","text":"<p>This page gives a high-level overview of the autonomous submarine\u2019s architecture, showing the main subsystems and how they interact.</p>"},{"location":"overview/architecture/#main-system-blocks","title":"Main System Blocks","text":"<p>```mermaid graph TD     A[Main MCU (STM32H7)] --&gt;|Controls| B[Motors]     A --&gt;|Reads data| C[Sensors]     A --&gt;|Coordinates| D[Power Management]     A --&gt;|Communicates| E[External Interfaces]</p> <pre><code>F[Backup MCU (STM32L0/ATTiny)] --&gt;|Monitors| D\nF --&gt;|Wake-up Logic| A\n\nsubgraph Sensors\n    C1[Pressure Sensor]\n    C2[IMU]\n    C3[Temperature Sensor]\n    C --&gt; C1\n    C --&gt; C2\n    C --&gt; C3\nend\n\nsubgraph Power\n    D1[Battery Pack]\n    D2[Piezo Backup]\n    D --&gt; D1\n    D --&gt; D2\nend\n</code></pre>"},{"location":"requirements/communication/","title":"Communication","text":"<p>This document outlines the communication protocols and interfaces required for the submarine\u2019s internal and external data exchange.</p> ID Requirement Description COM-01 Internal Communication Bus Use I2C, SPI, or UART buses to connect sensors, controllers, and subsystems. COM-02 Protocol Standardization All internal devices must adhere to documented protocols for reliable communication. COM-03 External Interfaces Provide USB for data download and configuration. COM-04 Wireless Telemetry (Optional) Future support for BLE or LoRa communication to transmit data when surfaced. COM-06 Error Detection and Correction Communication protocols should include error checking (CRC, checksums) and retransmission. COM-07 Interface Isolation Electrical isolation may be required for certain interfaces to protect against noise or faults. COM-08 Firmware Update Support Communication interfaces must support firmware updates via USB or SD card. COM-09 Low Latency Data packets for critical commands or status must be transmitted with minimal delay (&lt; 5s)."},{"location":"requirements/power/","title":"Power","text":"<p>This document outlines the power-related requirements for the autonomous submarine project, including energy sources, backup systems, power regulation, and monitoring.</p> ID Requirement Description PWR-01 Battery Capacity The battery pack must support at least 2 hours of continuous operation under full load. PWR-02 Voltage Regulation Voltage regulators must provide stable output voltages for all subsystems (e.g., 3.3V, 5V). PWR-03 Backup Power A supercapacitor or piezoelectric energy harvester must provide emergency backup power. PWR-04 Power Source Switching Intelligent power management must switch seamlessly between battery and backup sources. PWR-05 Power Monitoring Continuous real-time monitoring of battery voltage, current, and temperature must be included. PWR-06 Power Efficiency Power management system should maximize energy efficiency and minimize losses. PWR-07 Charging Interface The system should support safe and reliable charging of the battery pack via USB or other interface. PWR-08 Low-Power Mode The system must support low-power sleep modes to extend battery life during inactivity. PWR-09 Safety Cutoff Hardware-level cutoff must trigger on over-voltage, under-voltage, or thermal faults. PWR-10 Environmental Compliance All power components must operate safely within the submarine\u2019s temperature and pressure limits."},{"location":"requirements/sensors/","title":"Sensors Requirements \u2014 Autonomous Submarine","text":""},{"location":"requirements/sensors/#1-depth-sensor-s-01","title":"1. Depth Sensor (S-01)","text":"Parameter Specification Type Pressure-based sensor Operating Range 0 to 25 meters Accuracy \u00b10.1 meters Interface I2C or SPI"},{"location":"requirements/sensors/#2-imu-inertial-measurement-unit-s-02","title":"2. IMU (Inertial Measurement Unit) (S-02)","text":"Parameter Specification Components 3-axis accelerometer, gyroscope, magnetometer Acceleration Range \u00b116g Gyroscope Range \u00b12000 dps Gyro Drift &lt; 0.1\u00b0/s Interface SPI or I2C Update Rate \u2265 100 Hz"},{"location":"requirements/sensors/#3-temperature-sensor-s-03","title":"3. Temperature Sensor (S-03)","text":"Parameter Specification Range -10\u00b0C to 60\u00b0C Accuracy \u00b10.5\u00b0C Interface Analog or I2C Placement Inside and outside hull"},{"location":"requirements/sensors/#4-battery-voltage-and-current-sensors-s-04","title":"4. Battery Voltage and Current Sensors (S-04)","text":"Parameter Specification Voltage Range 0 to 16 V Current Range 0 to 10 A Accuracy \u00b11% Interface Analog or digital"},{"location":"requirements/sensors/#5-additional-sensors-optional-s-05","title":"5. Additional Sensors (Optional) (S-05)","text":"Sensor Type Purpose Pressure Sensor Internal pressure monitoring Humidity Sensor Detect leaks / condensation"},{"location":"requirements/sensors/#integration-notes","title":"Integration Notes","text":"<ul> <li>All sensors must be compatible with STM32H7 interfaces (SPI, I2C, UART, Analog).</li> <li>Sensor data must be timestamped and logged consistently.</li> <li>Calibration procedures must be documented and repeatable.</li> <li>Drivers and software modules must implement error handling and recovery.</li> </ul>"},{"location":"requirements/system/","title":"System Requirements \u2014 Autonomous Submarine","text":"<p>This document outlines the system-level requirements for the autonomous submarine project. It covers functional, performance, environmental, hardware, software, safety, and scalability considerations.</p> <p>Related pages:</p> <ul> <li>\ud83d\udd17 Sensor Requirements</li> <li>\ud83d\udd17 System Architecture</li> <li>\ud83d\udd17 STM32H7 Firmware Design</li> </ul>"},{"location":"requirements/system/#1-functional-requirements","title":"1. Functional Requirements","text":"ID Requirement Description F-01 Autonomous Navigation Navigate underwater without human intervention. F-02 Obstacle Avoidance Detect and avoid underwater obstacles using onboard sensors. F-03 Data Logging Log all sensor and system data locally (e.g., microSD card). F-04 Emergency Surface Mode Automatically surface in case of failure or low battery. F-05 Mission Upload Allow predefined mission plans to be uploaded before deployment. F-06 Dead-Reckoning Perform navigation without GPS using IMU and internal sensors."},{"location":"requirements/system/#2-performance-requirements","title":"2. Performance Requirements","text":"ID Requirement Description P-01 Battery Life Minimum 2 hours of continuous operation with sensors active. P-02 Navigation Accuracy Dead-reckoning error under \u00b15% of travel distance. P-03 Obstacle Detection Detect obstacles \u22651 meter ahead of the vehicle. P-04 Logging Frequency Log sensor data at \u22651 Hz (up to 10 Hz configurable). P-05 Transmission Latency When surfaced, transmit key data within 5 seconds."},{"location":"requirements/system/#3-environmental-requirements","title":"3. Environmental Requirements","text":"ID Requirement Description E-01 Operating Depth Must safely operate at depths up to 15 meters. E-02 Temperature Range Operate within 0\u00b0C to 45\u00b0C. E-03 Waterproofing Enclosure must comply with IP68 or better."},{"location":"requirements/system/#4-hardware-requirements","title":"4. Hardware Requirements","text":"ID Requirement Description H-01 Main Controller STM32H7 for motors, navigation, sensors, and comms. H-02 Backup Controller STM32L0 / ATTiny for low-power tasks, wakeup, pressure sensing. H-03 Sensor Suite See Sensors Requirements \u2014 includes IMU, pressure, sonar, etc. H-04 Propulsion System 4\u20136 brushed or brushless DC motors, with independent PWM control. H-05 Power System Battery pack with voltage regulation, piezo backup, and power monitoring. H-06 Passive Surfacing Fail-safe mechanism (e.g. ballast release or buoyancy shift) to surface passively."},{"location":"requirements/system/#5-software-requirements","title":"5. Software Requirements","text":"ID Requirement Description S-01 RTOS Support Use FreeRTOS or Zephyr for scheduling tasks and managing real-time events. S-02 AI Support Pretrained AI models run on STM32H7; training done offline on PC. S-03 Logging Format Output logs in standardized format (CSV or JSON). S-04 Configuration Interface CLI via serial or USB for setup and diagnostics. S-05 OTA Updates Optional \u2014 allow firmware updates via USB or SD card. S-06 Sensor Drivers Provide low-level drivers for each sensor type. S-07 Main Application Logic Integrate all modules into a unified firmware to run the submarine."},{"location":"requirements/system/#6-safety-requirements","title":"6. Safety Requirements","text":"ID Requirement Description SF-01 Auto-Surface on Failure Surface automatically on watchdog reset or critical error. SF-02 Battery Monitoring Shut down or surface on critically low battery. SF-03 Leak Detection Detect leaks and initiate emergency procedures. SF-04 Motor Cut-off Stop motors on hardware fault or overheating. SF-05 Kill Switch External magnetic kill switch for manual power-off."},{"location":"requirements/system/#7-scalability-maintainability","title":"7. Scalability &amp; Maintainability","text":"ID Requirement Description SC-01 Modular Architecture Design should support module-level replacements (e.g. MCU, sensors). SC-02 Software Flexibility Firmware and models can be updated without full teardown. SC-03 Expandable I/O Support adding new I2C/SPI/UART devices with minimal rework. SC-04 Documentation All software APIs, hardware interfaces, and wiring should be documented. SC-05 Sim/Test Support Include test hooks and simulation mode for development/debug."}]}