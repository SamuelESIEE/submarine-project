{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Autonomous Submarine Project","text":"<p>This documentation outlines the design, development, and validation of an autonomous underwater vehicle built with open hardware and software.</p> <p>\ud83d\udd17 See Project Introduction to get started.</p>"},{"location":"design/block_diagrams.html","title":"Block Diagrams","text":"<p>Below is the high-level system block diagram of the Autonomous Submarine:</p> <p>![System Block Diagram]</p>"},{"location":"design/block_diagrams.html#description","title":"Description","text":"<ul> <li>The STM32H7 MCU controls motor drivers, reads sensor data, and handles communication.</li> <li>The STM32L0 backup MCU monitors battery and pressure sensors to wake the system from sleep.</li> <li>AI module (Raspberry Pi or K210) processes vision data for obstacle avoidance.</li> <li>Wireless module manages communication with surface station.</li> </ul>"},{"location":"design/interfaces.html","title":"Communication Interfaces","text":"Interface Usage Protocol Details UART Debugging and data logging 115200 baud, 8N1 SPI Pressure sensor communication Mode 0, 1 MHz I2C IMU sensor and EEPROM Standard mode 100 kHz Wireless Telemetry and remote commands 2.4 GHz proprietary protocol <p>All interfaces use level shifting to protect the MCU inputs from voltage mismatches.</p>"},{"location":"firmware/stm32h7.html","title":"Firmware for STM32H7","text":""},{"location":"firmware/stm32h7.html#overview","title":"Overview","text":"<p>The STM32H7 firmware is responsible for:</p> <ul> <li>Sensor data acquisition and filtering</li> <li>Motor control (PWM outputs)</li> <li>Communication with AI coprocessor and wireless module</li> <li>Data logging on microSD card</li> </ul>"},{"location":"firmware/stm32h7.html#architecture","title":"Architecture","text":"<ul> <li>Main Loop: Periodically reads sensors and updates motor commands.</li> <li>Interrupts: Handle UART, SPI data reception.</li> <li>Power Management: Coordinates with STM32L0 for low-power modes.</li> </ul>"},{"location":"firmware/stm32h7.html#code-snippet-reading-imu-via-i2c","title":"Code Snippet: Reading IMU via I2C","text":"<p>```c HAL_I2C_Mem_Read(&amp;hi2c1, MPU9250_ADDRESS, MPU9250_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buffer, 6, 100);</p>"},{"location":"overview/architecture.html","title":"System Architecture Overview","text":"<p>This page presents the high-level architecture of the autonomous submarine project. It shows how the main subsystems interact to enable intelligent underwater navigation and data acquisition.</p>"},{"location":"overview/architecture.html#core-architecture","title":"\ud83e\udde0 Core Architecture","text":"<ul> <li>Main MCU (STM32H7) handles:</li> <li>Motor control</li> <li>Sensor data processing</li> <li>AI coordination</li> <li> <p>Communication with external devices</p> </li> <li> <p>Low-Power MCU (STM32L0 / ATtiny) manages:</p> </li> <li>Wake-up logic</li> <li>Pressure monitoring</li> <li> <p>Emergency power systems</p> </li> <li> <p>AI Coprocessor (K210 or Raspberry Pi Zero 2 W) is used for:</p> </li> <li>Image processing</li> <li>Navigation assistance</li> <li>Model inference</li> </ul>"},{"location":"overview/architecture.html#power-management","title":"\ud83d\udd0b Power Management","text":"<ul> <li>Main battery powers propulsion, AI, and navigation.</li> <li>Supercapacitor or piezo module acts as backup.</li> <li>Intelligent regulation switches between sources.</li> </ul>"},{"location":"overview/architecture.html#communication-layers","title":"\ud83d\udef0 Communication Layers","text":"<ul> <li>Internal Bus (I2C / SPI / UART) links sensors and controllers.</li> <li>External Interfaces include:</li> <li>USB</li> <li>BLE or LoRa (optional for future telemetry)</li> </ul>"},{"location":"overview/architecture.html#navigation-flow","title":"\ud83d\uddfa Navigation Flow","text":"<ol> <li>Receive mission instruction</li> <li>Initialize system state</li> <li>Perform dead-reckoning with internal sensors</li> <li>Use AI for visual correction</li> <li>Log all data to microSD</li> </ol>"},{"location":"overview/architecture.html#sensor-vision-stack","title":"\ud83d\udcf7 Sensor &amp; Vision Stack","text":"<ul> <li>360\u00b0 Camera</li> <li>Front-Facing Camera</li> <li>Pressure, IMU, Temp sensors</li> </ul>"},{"location":"overview/architecture.html#diagrams","title":"\ud83d\uddbc Diagrams","text":"<p>You can insert diagrams here:</p> <p>```markdown ![System Overview Diagram]</p>"},{"location":"overview/introduction.html","title":"Autonomous Submarine Project Overview","text":"<p>Welcome to the Autonomous Submarine documentation! This project focuses on designing, building, and testing an autonomous underwater vehicle with advanced navigation, sensing, and control capabilities.</p>"},{"location":"overview/introduction.html#project-goals","title":"Project Goals","text":"<ul> <li>Develop a reliable and robust submarine platform capable of autonomous underwater navigation.</li> <li>Integrate various sensors to monitor environmental conditions and system status.</li> <li>Implement firmware to control motors, sensors, and communication systems.</li> <li>Validate system performance through rigorous testing.</li> </ul>"},{"location":"overview/introduction.html#documentation-structure","title":"Documentation Structure","text":"<p>To help you navigate this project, here is an overview of the main documentation sections:</p> <ul> <li>Requirements: Detailed hardware and software requirements, including sensors and system constraints.</li> <li>Design: System architecture, block diagrams, and hardware interface designs.</li> <li>Firmware: Embedded software running on the STM32H7 microcontroller.</li> <li>Testing: Test plans, results, and analysis.</li> </ul>"},{"location":"overview/introduction.html#getting-started","title":"Getting Started","text":"<ul> <li>Start by reviewing the Requirements to understand the scope and constraints.</li> <li>Dive into the Design section to see how the system is architected.</li> <li>Explore the Firmware documentation to learn about the software implementation.</li> <li>Finally, review the Testing results to understand system reliability.</li> </ul> <p>If you have questions or want to contribute, please refer to the repository README or contact the project maintainer.</p>"},{"location":"requirements/sensors.html","title":"Sensors Requirements","text":""},{"location":"requirements/sensors.html#1-depth-sensor","title":"1. Depth Sensor","text":"Parameter Specification Type Pressure-based sensor Operating Range 0 to 50 meters Accuracy \u00b10.1 meters Interface I2C or SPI Update Rate \u2265 10 Hz"},{"location":"requirements/sensors.html#2-imu-inertial-measurement-unit","title":"2. IMU (Inertial Measurement Unit)","text":"Parameter Specification Components 3-axis accel, gyro, magnetometer Acceleration Range \u00b116g Gyroscope Range \u00b12000 dps Gyro Drift &lt; 0.1\u00b0/s Interface SPI or I2C Update Rate \u2265 100 Hz"},{"location":"requirements/sensors.html#3-temperature-sensor","title":"3. Temperature Sensor","text":"Parameter Specification Range -10\u00b0C to 60\u00b0C Accuracy \u00b10.5\u00b0C Interface Analog or I2C Placement Inside and outside hull"},{"location":"requirements/sensors.html#4-sonar-acoustic-sensor-optional","title":"4. Sonar / Acoustic Sensor (Optional)","text":"Parameter Specification Purpose Obstacle detection/ranging Range Up to 20 meters Accuracy \u00b10.1 meters Interface UART or SPI"},{"location":"requirements/sensors.html#5-battery-voltage-and-current-sensors","title":"5. Battery Voltage and Current Sensors","text":"Parameter Specification Voltage Range 0 to 16V Current Range 0 to 10A Accuracy \u00b11% Interface Analog or digital"},{"location":"requirements/sensors.html#6-additional-sensors-optional","title":"6. Additional Sensors (Optional)","text":"Sensor Type Purpose Pressure Sensor Internal pressure monitoring Humidity Sensor Detect leaks/condensation"},{"location":"requirements/sensors.html#integration-notes","title":"Integration Notes","text":"<ul> <li>All sensors must support STM32H7 interfaces (SPI, I2C, UART, Analog).</li> <li>Data must be timestamped and logged.</li> <li>Calibration procedures must be documented.</li> </ul>"},{"location":"requirements/system.html","title":"System Requirements \u2014 Autonomous Submarine","text":"<p>This document outlines the system-level requirements for the development of the autonomous submarine. It covers functional, performance, environmental, hardware, software, safety, and scalability aspects.</p> <p>Related pages: - \ud83d\udd17 Sensor Requirements - \ud83d\udd17 System Architecture - \ud83d\udd17 STM32H7 Firmware Design</p>"},{"location":"requirements/system.html#1-functional-requirements","title":"1. Functional Requirements","text":"ID Requirement Description F-01 Autonomous Navigation The submarine must navigate underwater without human intervention. F-02 Obstacle Detection The system must detect and avoid underwater obstacles using onboard sensors. F-03 Data Logging All sensor and status data must be logged locally (e.g., on a microSD card). F-04 Data Transmission The system must be able to transmit data (via RF/LoRa or Wi-Fi) when surfaced. F-05 Emergency Surface Mode The submarine must surface autonomously in case of critical failure or low battery. F-06 Mission Scripting Predefined mission plans should be uploadable before deployment."},{"location":"requirements/system.html#2-performance-requirements","title":"2. Performance Requirements","text":"ID Requirement Description P-01 Battery Life Minimum 2 hours continuous operation with full sensor load. P-02 Navigation Accuracy Dead-reckoning accuracy better than \u00b15% of traveled distance. P-03 Obstacle Detection Range Detect obstacles at a minimum of 1 meter in front of the vehicle. P-04 Logging Rate Log sensor data at a minimum of 1 Hz (configurable up to 10 Hz). P-05 Transmission Latency When surfaced, send data packets within 5 seconds."},{"location":"requirements/system.html#3-environmental-requirements","title":"3. Environmental Requirements","text":"ID Requirement Description E-01 Operating Depth Maximum safe depth: 5 meters (test limit). E-02 Operating Temperature 0\u00b0C to 45\u00b0C operating range. E-03 Waterproofing Standard Enclosure must comply with at least IP68 or equivalent. E-04 Saltwater Compatibility Components must be resistant to corrosion (use marine-grade materials)."},{"location":"requirements/system.html#4-hardware-requirements","title":"4. Hardware Requirements","text":"ID Requirement Description H-01 Main Controller STM32H7 for motor control, navigation, and communication. H-02 Backup Controller STM32L0/ATTiny for low-power monitoring (e.g., pressure, wake-up logic). H-03 AI Module Raspberry Pi Zero 2 W or Kendryte K210 for onboard image processing. H-04 Sensors See Sensors Requirements for full list (IMU, pressure, sonar, etc.). H-05 Motors 4\u20136 brushed or brushless DC motors with PWM speed control. H-06 Power Management Battery pack with voltage regulation, piezo backup, and power monitoring."},{"location":"requirements/system.html#5-software-requirements","title":"5. Software Requirements","text":"ID Requirement Description S-01 RTOS Integration Use of FreeRTOS or Zephyr for task scheduling. S-02 AI Framework Support TensorFlow Lite (Pi Zero) or custom model support for K210. S-03 Logging Format Standardized format (e.g., CSV, JSON) for recorded data. S-04 Config Interface Simple serial CLI or USB-based configuration interface. S-05 OTA Update Capability Optional \u2014 firmware upgradable via USB or SD card."},{"location":"requirements/system.html#6-safety-requirements","title":"6. Safety Requirements","text":"ID Requirement Description SF-01 Surface-on-Fail Auto-surface on watchdog reset or unrecoverable system error. SF-02 Battery Monitoring Continuous monitoring of battery level and shutdown on critical level. SF-03 Waterproof Integrity Check Leak detection must trigger emergency shutdown and surfacing. SF-04 Motor Cut-off on Error Motors must shut off in case of system exception or critical temperature. SF-05 External Kill Switch External magnet switch must allow for forced power-off."},{"location":"requirements/system.html#7-scalability-maintainability","title":"7. Scalability &amp; Maintainability","text":"ID Requirement Description SC-01 Modular Architecture System must allow easy replacement or upgrade of key modules (e.g. sensors, MCU, storage). SC-02 Software Upgradability Firmware and AI models should be replaceable without disassembly. SC-03 Expandable Sensor Bus Hardware must allow the addition of new sensors with minimal code change. SC-04 Documentation Requirements All interfaces, software components, and hardware should be documented. SC-05 Simulation/Test Interface Software should include test hooks or simulation modes for lab validation."}]}